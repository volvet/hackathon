1.  定义
   typedef struct OpaqueVTCompressionSession* VTCompressionSessionRef;
   此为VTCompressionSession的定义, 从Apple的注释来理解, 这个是支持引用计数的CF OBJECT.  所谓CF OBJECT, 就是Apple Core Foundation Object.
   Core Foundation 是apple 的low-level C application programming interface. 也就是说,VTCompressionSession是Core Foundation 所提供的编程
   接口， 其实现是C Library, 不是Object C Library. 

2.  CALLBACK
   typedef void (*VTCompressionOutputCallback)(
                void * outputCallbackRefCon, 
                void * sourceFrameRefCon, 
                OSStatus  status, 
                VTEncodeInfoFlags   infoFlags, 
                CMSampleBuffRef     sampleBuffer);
  此为编码完成之后的回调函数。 需要注意的是这个函数的调用顺序是DECODE ORDER,  并非DISPLAY ORDER.  
  outputCallbackRefCon， 这个参数是Callback reference value,  其实是创建VTCompressionSession的时候所传入的用户定义的对象。 在每次
  Callback函数被调用的时候会作为参数传入。 
  sourceFrameRefCon,   这个参数是frame reference value,  其实是在调用每个Frame encode 的时候所传入的用户定义跟Frame有关的对象。 
  这个对象会在Frame encode 完成的时候，  触发回调的时候作为参数传入，  Frame的属性， 比如Time Stamp之类可以定义在这个对象中。  
  status,  noErr 表示编码没有错误,  否则会有错误码返回。  
  infoFlags,   有两种可能的值， Asynchronous 表示编码是异步调用，  FrameDropped, 表示这个Frame被Drop了。 
  CMSampleBuffRef  这个就是返回的视频码流。  


3  EncoderID
   VT_EXPORT const CFStringRef kVTVideoEncoderSpecification_EncoderID(_OSX_AVAILABLE_STARTING)(_MAC_10_0, IPHONE_8_0); 
    这个是简单的EncodeID定义，  从这里可以看出， 其实APPLE在iOS8.0和MAC 10.0 上都提供了硬件编码支持.  

 
  
